# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "COLON DIVIDE DOT ELSE IF IS_EQUAL IS_GREATER IS_GREATER_EQUAL IS_LESS IS_LESS_EQUAL MINUS NUMBER PLUS PRINT_STRING SEMICOLON STRING THEN TIMES WORDprogram : statementsstatements : statements statement\n                      | statement\n        statement : expressionexpression : NUMBER\n                      | STRING\n        expression : arithmetic_oparithmetic_op : expression expression PLUS\n                         | expression expression MINUS\n                         | expression expression TIMES\n                         | expression expression DIVIDEempty :"

_lr_action_items = {
    "NUMBER": (
        [
            0,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
        ],
        [
            5,
            5,
            -3,
            5,
            -5,
            -6,
            -7,
            -2,
            5,
            -8,
            -9,
            -10,
            -11,
        ],
    ),
    "STRING": (
        [
            0,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
        ],
        [
            6,
            6,
            -3,
            6,
            -5,
            -6,
            -7,
            -2,
            6,
            -8,
            -9,
            -10,
            -11,
        ],
    ),
    "$end": (
        [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            10,
            11,
            12,
            13,
        ],
        [
            0,
            -1,
            -3,
            -4,
            -5,
            -6,
            -7,
            -2,
            -8,
            -9,
            -10,
            -11,
        ],
    ),
    "PLUS": (
        [
            5,
            6,
            7,
            9,
            10,
            11,
            12,
            13,
        ],
        [
            -5,
            -6,
            -7,
            10,
            -8,
            -9,
            -10,
            -11,
        ],
    ),
    "MINUS": (
        [
            5,
            6,
            7,
            9,
            10,
            11,
            12,
            13,
        ],
        [
            -5,
            -6,
            -7,
            11,
            -8,
            -9,
            -10,
            -11,
        ],
    ),
    "TIMES": (
        [
            5,
            6,
            7,
            9,
            10,
            11,
            12,
            13,
        ],
        [
            -5,
            -6,
            -7,
            12,
            -8,
            -9,
            -10,
            -11,
        ],
    ),
    "DIVIDE": (
        [
            5,
            6,
            7,
            9,
            10,
            11,
            12,
            13,
        ],
        [
            -5,
            -6,
            -7,
            13,
            -8,
            -9,
            -10,
            -11,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "program": (
        [
            0,
        ],
        [
            1,
        ],
    ),
    "statements": (
        [
            0,
        ],
        [
            2,
        ],
    ),
    "statement": (
        [
            0,
            2,
        ],
        [
            3,
            8,
        ],
    ),
    "expression": (
        [
            0,
            2,
            4,
            9,
        ],
        [
            4,
            4,
            9,
            9,
        ],
    ),
    "arithmetic_op": (
        [
            0,
            2,
            4,
            9,
        ],
        [
            7,
            7,
            7,
            7,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> program", "S'", 1, None, None, None),
    ("program -> statements", "program", 1, "p_program", "forthparser.py", 12),
    (
        "statements -> statements statement",
        "statements",
        2,
        "p_statements",
        "forthparser.py",
        17,
    ),
    ("statements -> statement", "statements", 1, "p_statements", "forthparser.py", 18),
    ("statement -> expression", "statement", 1, "p_statement", "forthparser.py", 27),
    (
        "expression -> NUMBER",
        "expression",
        1,
        "p_literal_expression",
        "forthparser.py",
        31,
    ),
    (
        "expression -> STRING",
        "expression",
        1,
        "p_literal_expression",
        "forthparser.py",
        32,
    ),
    (
        "expression -> arithmetic_op",
        "expression",
        1,
        "p_operator_expression",
        "forthparser.py",
        37,
    ),
    (
        "arithmetic_op -> expression expression PLUS",
        "arithmetic_op",
        3,
        "p_arithmetic_op",
        "forthparser.py",
        41,
    ),
    (
        "arithmetic_op -> expression expression MINUS",
        "arithmetic_op",
        3,
        "p_arithmetic_op",
        "forthparser.py",
        42,
    ),
    (
        "arithmetic_op -> expression expression TIMES",
        "arithmetic_op",
        3,
        "p_arithmetic_op",
        "forthparser.py",
        43,
    ),
    (
        "arithmetic_op -> expression expression DIVIDE",
        "arithmetic_op",
        3,
        "p_arithmetic_op",
        "forthparser.py",
        44,
    ),
    ("empty -> <empty>", "empty", 0, "p_empty", "forthparser.py", 51),
]
